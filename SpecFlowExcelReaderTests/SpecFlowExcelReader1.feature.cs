// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowExcelReaderTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ExcelReaderSpecFlow", Description="\tAs an user\r\n\tI want to read data from a excel sheet", SourceFile="SpecFlowExcelReader1.feature", SourceLine=0)]
    public partial class ExcelReaderSpecFlowFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SpecFlowExcelReader1.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExcelReaderSpecFlow", "\tAs an user\r\n\tI want to read data from a excel sheet", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ReadAColumnDataFromExcelSheet(string fileName, string sheetName, string rowNumber, string columnName, string result, string pwd, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Read a column data from excel sheet", null, @__tags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I have loaded the excel using {0} and {1}", fileName, pwd), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("I pass {0} and {1} and {2} to read", sheetName, rowNumber, columnName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 0", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant0()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel1.xlsx", "Purchase", "1", "Fname", "David", "myPwd", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 1", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant1()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel1.xlsx", "Purchase", "1", "Lname", "Copper Field", "myPwd", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 2", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant2()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel1.xlsx", "Purchase", "1", "City", "New York", "myPwd", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 3", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant3()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel1.xlsx", "Purchase", "1", "Total", "1100", "myPwd", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 4", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant4()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel2.xlsx", "Vehicles", "1", "Vehicle", "car", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Read a column data from excel sheet, Variant 5", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void ReadAColumnDataFromExcelSheet_Variant5()
        {
#line 6
this.ReadAColumnDataFromExcelSheet("TestExcel2.xlsx", "Vehicles", "1", "Wheels", "4", "", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
